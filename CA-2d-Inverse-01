{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9063797,"sourceType":"datasetVersion","datasetId":5466132},{"sourceId":9099204,"sourceType":"datasetVersion","datasetId":5491436},{"sourceId":9464930,"sourceType":"datasetVersion","datasetId":5754939},{"sourceId":9534462,"sourceType":"datasetVersion","datasetId":5806981},{"sourceId":9588829,"sourceType":"datasetVersion","datasetId":5848012},{"sourceId":9676070,"sourceType":"datasetVersion","datasetId":5913743},{"sourceId":9677698,"sourceType":"datasetVersion","datasetId":5914943},{"sourceId":9738599,"sourceType":"datasetVersion","datasetId":5960701},{"sourceId":9745891,"sourceType":"datasetVersion","datasetId":5966249},{"sourceId":9798171,"sourceType":"datasetVersion","datasetId":6004838},{"sourceId":9799248,"sourceType":"datasetVersion","datasetId":6005538}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## 1) Install and import needed libraries","metadata":{}},{"cell_type":"code","source":"!pip install deepxde  matplotlib  tensorflow scipy pandas \n\nimport os\n# Set backend\nos.environ[\"DDE_BACKEND\"] = \"tensorflow\" # Tells deepxde which ML library to use as backend\nimport tensorflow as tf\nimport deepxde as dde\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.interpolate import interp1d\nfrom scipy.interpolate import RegularGridInterpolator\nfrom deepxde.callbacks import Callback\nimport pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-11-26T16:02:52.926758Z","iopub.execute_input":"2024-11-26T16:02:52.927086Z","iopub.status.idle":"2024-11-26T16:03:19.032313Z","shell.execute_reply.started":"2024-11-26T16:02:52.927062Z","shell.execute_reply":"2024-11-26T16:03:19.031578Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Collecting deepxde\n  Downloading DeepXDE-1.12.2-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\nRequirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.15.0)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (1.11.4)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.26.4)\nRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from deepxde) (1.2.2)\nRequirement already satisfied: scikit-optimize>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from deepxde) (0.10.2)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\nRequirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\nRequirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (23.5.26)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.10.0)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (16.0.6)\nRequirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (69.0.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.9.0)\nRequirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.14.1)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.35.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.60.0)\nRequirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.1)\nRequirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.15.0)\nCollecting keras<2.16,>=2.15.0 (from tensorflow)\n  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.4)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.42.0)\nRequirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (1.4.2)\nRequirement already satisfied: pyaml>=16.9 in /opt/conda/lib/python3.10/site-packages (from scikit-optimize>=0.9.0->deepxde) (24.4.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->deepxde) (3.2.0)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.26.1)\nRequirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.5.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.32.3)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.3)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.2.4)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\nRequirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from pyaml>=16.9->scikit-optimize>=0.9.0->deepxde) (6.0.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.7.4)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.3)\nRequirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\nDownloading DeepXDE-1.12.2-py3-none-any.whl (184 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m184.4/184.4 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m30.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: keras, deepxde\n  Attempting uninstall: keras\n    Found existing installation: keras 3.4.1\n    Uninstalling keras-3.4.1:\n      Successfully uninstalled keras-3.4.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed deepxde-1.12.2 keras-2.15.0\n","output_type":"stream"},{"name":"stderr","text":"2024-11-26 16:03:07.471371: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-11-26 16:03:07.471506: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-11-26 16:03:07.621598: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nUsing backend: tensorflow\nOther supported backends: tensorflow.compat.v1, pytorch, jax, paddle.\npaddle supports more examples now and is recommended.\nEnable just-in-time compilation with XLA.\n\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## 2) Define Constants","metadata":{}},{"cell_type":"code","source":"\nuse_lbfgs = False # train using L-BFGS optimizer or not\n\nBATCH_SIZE = 32  # Batch size\n\nITERATIONS_ADAM = 50000  # Number of training iterations for Adam\nITERATIONS_LBFGS = 20000  # Number of training iterations for LBFGS\n \nLOSS_WEIGHTS = [1, 1, 1, 1, 1, 1, 1000]  # Weights for different components of the loss function\n\n\nT_Start = 0\nTIME_STEP = 0.10\nT_End = 0.10\n\n# Domain size\nStart_Width = Start_Length = -1 \nWIDTH = LENGTH = 1  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T16:03:19.034319Z","iopub.execute_input":"2024-11-26T16:03:19.034919Z","iopub.status.idle":"2024-11-26T16:03:19.040028Z","shell.execute_reply.started":"2024-11-26T16:03:19.034887Z","shell.execute_reply":"2024-11-26T16:03:19.039137Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"\ngeom = dde.geometry.Rectangle([Start_Width, Start_Length], [WIDTH, LENGTH])  # Geometry domain\n\ntime_domain = dde.geometry.TimeDomain(T_Start, T_End)\ngeomtime = dde.geometry.GeometryXTime(geom, time_domain)\n\n# Cahn Hilliard PDE\nepsilon = tf.Variable(5.0, dtype=tf.float32, trainable= True) # true val = 0.05\ndef cahn_hilliard_Wight(x, y):\n    \n    u, mu = y[:, 0:1], y[:, 1:2]\n    \n    du_t = dde.grad.jacobian(y, x, i=0, j=2) # h_t\n    du_xx = dde.grad.hessian(y, x, component=0, i=0, j=0)\n    du_yy = dde.grad.hessian(y, x, component=0, i=1, j=1)\n    \n    dmu_xx = dde.grad.hessian(y, x, component=1, i=0, j=0)\n    dmu_yy = dde.grad.hessian(y, x, component=1, i=1, j=1)\n    \n    f_h = u**3 - u\n    \n    eq1 = du_t - (dmu_xx + dmu_yy)\n    eq2 = mu - (f_h - epsilon**2 * (du_xx + du_yy))\n    \n    return [eq1, eq2]\n\n# Define the initial condition function using NumPy (for visualization)\nr = 0.4\ndef initial_condition_CA_wight_np(X):\n    x_coord = X[:, 0:1]\n    y_coord = X[:, 1:2]\n    R1 = np.sqrt((x_coord - 0.7 * r) ** 2 + y_coord ** 2)\n    R2 = np.sqrt((x_coord + 0.7 * r) ** 2 + y_coord ** 2)\n    phi_R1 = np.tanh((r - R1) / (2 * 0.05))\n    phi_R2 = np.tanh((r - R2) / (2 * 0.05))\n    return np.maximum(phi_R1, phi_R2)\n\n# Boundary Conditions\ndef on_boundary_x(X, on_boundary):\n        x, _, _ = X\n        return on_boundary and np.isclose(x, Start_Width) or np.isclose(x, WIDTH)  # Check if on the left boundary\ndef on_boundary_y(X, on_boundary):\n        _, y, _ = X\n        return on_boundary and np.isclose(y, Start_Length) or np.isclose(y, LENGTH)  # Check if on the left boundary\n    \nclass SimpleLossTrackingCallback(Callback):\n    def __init__(self, every_n_epochs=1000, file_path=\"/kaggle/working/losses_simple.txt\"):\n        super(SimpleLossTrackingCallback, self).__init__()\n        self.every_n_epochs = every_n_epochs\n        self.file_path = file_path\n        \n        # Ensure the directory exists\n        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n        \n        # Check if file exists and is not empty, if so, skip writing the header\n        if not os.path.exists(self.file_path) or os.stat(self.file_path).st_size == 0:\n            with open(self.file_path, \"w\") as f:\n                f.write(\"Epoch,PDE Loss,bc_h_x Loss,bc_h_y Loss,bc_h_deriv_x Loss,bc_h_deriv_y Loss,IC Loss,Observe Loss\\n\")\n\n    def on_epoch_end(self):\n        if self.model.train_state.step % self.every_n_epochs == 0 or self.model.train_state.step == 1:\n            current_losses = self.model.train_state.loss_train\n            loss_str = \",\".join(map(str, current_losses))\n            with open(self.file_path, \"a\") as f:\n                f.write(f\"{self.model.train_state.step},{loss_str}\\n\")\n\n# Generate a grid of points (X, Y) for visualization\nx_vals = np.linspace(Start_Width, WIDTH, 100)\ny_vals = np.linspace(Start_Length, LENGTH, 100)\nX, Y = np.meshgrid(x_vals, y_vals)\nXY_grid = np.hstack([X.reshape(-1, 1), Y.reshape(-1, 1)])  # Flatten the grid for function input\n\n# Compute the initial condition on the grid\nZ = initial_condition_CA_wight_np(XY_grid).reshape(100, 100)\n\n# Plot the initial condition\nplt.figure(figsize=(8, 6))\ncontour = plt.contourf(X, Y, Z, levels=100, cmap='jet')\nplt.colorbar(contour)\nplt.title(\"Initial Condition (Allen-Cahn)\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show()\n\n# Allen Cahn BC and ICs and Data\nbc_h_x = dde.icbc.PeriodicBC(geomtime, component=0, derivative_order=0, component_x=0, on_boundary=on_boundary_x)\nbc_h_y = dde.icbc.PeriodicBC(geomtime, component=0, derivative_order=0, component_x=1, on_boundary=on_boundary_y)\n\n# Periodic Boundary Conditions for the derivative of 'h' in x and y directions\nbc_h_deriv_x = dde.icbc.PeriodicBC(geomtime, component=0, derivative_order=1, component_x=0, on_boundary=on_boundary_x)\nbc_h_deriv_y = dde.icbc.PeriodicBC(geomtime, component=0, derivative_order=1, component_x=1, on_boundary=on_boundary_y)\n\n# Load the data from the text file - should be in Kaggle as a dataset\ninitial_data = np.loadtxt(\"/kaggle/input/0-01epsilon0-1time/time_0.1_epsilon_0.01_ca.txt\", delimiter=',')\n\n# Extract x, y coordinates and eta1 values\nxy_observ = initial_data[:, 0:2]  # x, y coordinates\neta1_observ = initial_data[:, 2:3]  # eta1 values\n\n# Update the time to 0.25 instead of 0\ntime_value = 0.10  # Change this to your desired time\nxyt_observ = np.hstack((xy_observ, np.full((xy_observ.shape[0], 1), time_value)))\n\n# Define the initial condition using PointSetBC\nfrom deepxde.icbc import PointSetBC\nobserv_ic_eta1 = PointSetBC(xyt_observ, eta1_observ, component=0)\n\n# Data for AC 2D\ndata_AC = dde.data.TimePDE(\n        geomtime, cahn_hilliard_Wight, [bc_h_x, bc_h_y, bc_h_deriv_x, bc_h_deriv_y,  observ_ic_eta1],\n        anchors=xyt_observ,\n        num_domain=30000, num_boundary=1600, num_test=50000\n    )\n    \niterations_list = [0]  # Starting with iteration 0\nepsilon_values = [epsilon.value().numpy()]  # Assuming this is how you access the value of your variable\n\n# Network Architecure\nnet = dde.nn.FNN([3] + [128] * 6 + [2], \"tanh\", \"Glorot normal\")\nvariable = dde.callbacks.VariableValue(epsilon, period=1000) # tracks trainable variable\nmodel = dde.Model(data_AC, net)\n\n\ntotal_iterations = 0\nwhile total_iterations < ITERATIONS_ADAM:\n                # Calculate the number of iterations for this loop\n                iter_this_loop = 1000\n                # Update the total iterations\n\n                # Dynamic learning rate\n                if total_iterations < 50000:\n                    model.compile(\"adam\", lr=1e-3, loss= 'MSE', loss_weights=LOSS_WEIGHTS, external_trainable_variables=[epsilon])\n                else:\n                     model.compile(\"adam\", lr=1e-4, loss= 'MSE', loss_weights=LOSS_WEIGHTS, external_trainable_variables=[epsilon])\n                      \n\n                losshistory, train_state = model.train(epochs=iter_this_loop, display_every=1000)\n                # Update gamma value and error after training\n                current_epsilon_value = epsilon.value().numpy()\n                print(f\"Iteration: {total_iterations}, Epsilon Value: {current_epsilon_value}\")\n\n                \n                # Update gamma value and error after training\n                epsilon_values.append(current_epsilon_value)\n                iterations_list.append(total_iterations + iter_this_loop)\n\n                total_iterations += iter_this_loop\n\nif use_lbfgs:\n    model.compile(\"L-BFGS\", loss = 'MSE', loss_weights = LOSS_WEIGHTS, external_trainable_variables=[epsilon])\n    losshistory, train_state = model.train(epochs=ITERATIONS_LBFGS, display_every=1000, callbacks=[detailed_loss_tracker, variable])\n","metadata":{"execution":{"iopub.status.busy":"2024-11-26T16:03:19.042903Z","iopub.execute_input":"2024-11-26T16:03:19.043215Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Warning: 1415 points required, but 1444 points sampled.\nWarning: 50000 points required, but 51984 points sampled.\nCompiling model...\n'compile' took 0.003391 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/initializers/initializers.py:120: UserWarning: The initializer GlorotNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initializer instance more than once.\n  warnings.warn(\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1732637009.375159      34 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"Step      Train loss                                                                Test loss                                                                 Test metric\n0         [1.81e-02, 5.93e+00, 2.96e-01, 1.88e-02, 9.95e-05, 3.95e-04, 1.26e+03]    [1.59e-02, 5.34e+00, 2.96e-01, 1.88e-02, 9.95e-05, 3.95e-04, 1.26e+03]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637016.410685      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"1000      [1.30e+00, 5.51e+00, 2.58e+00, 8.56e+00, 9.79e-02, 2.78e-01, 3.30e+02]    [1.45e+00, 6.17e+00, 2.58e+00, 8.56e+00, 9.79e-02, 2.78e-01, 3.30e+02]    []  \n\nBest model at step 1000:\n  train loss: 3.48e+02\n  test loss: 3.49e+02\n  test metric: []\n\n'train' took 100.769458 s\n\nIteration: 0, Epsilon Value: 4.362623691558838\nCompiling model...\n'compile' took 0.008750 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n1000      [1.30e+00, 5.51e+00, 2.58e+00, 8.56e+00, 9.79e-02, 2.78e-01, 3.30e+02]    [1.45e+00, 6.17e+00, 2.58e+00, 8.56e+00, 9.79e-02, 2.78e-01, 3.30e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637111.433332      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"2000      [1.44e+00, 5.20e+00, 1.66e+00, 1.40e+01, 2.39e+00, 2.81e+00, 1.97e+02]    [8.49e-01, 3.41e+00, 1.66e+00, 1.40e+01, 2.39e+00, 2.81e+00, 1.97e+02]    []  \n\nBest model at step 2000:\n  train loss: 2.25e+02\n  test loss: 2.22e+02\n  test metric: []\n\n'train' took 95.019801 s\n\nIteration: 1000, Epsilon Value: 3.6255300045013428\nCompiling model...\n'compile' took 0.008168 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n2000      [1.44e+00, 5.20e+00, 1.66e+00, 1.40e+01, 2.39e+00, 2.81e+00, 1.97e+02]    [8.49e-01, 3.41e+00, 1.66e+00, 1.40e+01, 2.39e+00, 2.81e+00, 1.97e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637206.433333      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"3000      [8.05e+00, 7.15e+00, 5.44e-01, 9.56e+00, 1.18e+00, 8.26e-01, 2.36e+02]    [4.40e+00, 3.21e+00, 5.44e-01, 9.56e+00, 1.18e+00, 8.26e-01, 2.36e+02]    []  \n\nBest model at step 2000:\n  train loss: 2.25e+02\n  test loss: 2.22e+02\n  test metric: []\n\n'train' took 94.919576 s\n\nIteration: 2000, Epsilon Value: 2.924642324447632\nCompiling model...\n'compile' took 0.006056 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n3000      [8.05e+00, 7.15e+00, 5.44e-01, 9.56e+00, 1.18e+00, 8.26e-01, 2.36e+02]    [4.40e+00, 3.21e+00, 5.44e-01, 9.56e+00, 1.18e+00, 8.26e-01, 2.36e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637301.332007      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"4000      [9.29e-01, 5.46e+00, 8.24e-01, 1.06e+01, 2.20e+00, 1.17e+00, 1.71e+02]    [8.26e-01, 4.98e+00, 8.24e-01, 1.06e+01, 2.20e+00, 1.17e+00, 1.71e+02]    []  \n\nBest model at step 4000:\n  train loss: 1.92e+02\n  test loss: 1.92e+02\n  test metric: []\n\n'train' took 94.905379 s\n\nIteration: 3000, Epsilon Value: 2.872786283493042\nCompiling model...\n'compile' took 0.006213 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n4000      [9.29e-01, 5.46e+00, 8.24e-01, 1.06e+01, 2.20e+00, 1.17e+00, 1.71e+02]    [8.26e-01, 4.98e+00, 8.24e-01, 1.06e+01, 2.20e+00, 1.17e+00, 1.71e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637396.271666      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"5000      [1.18e+00, 4.84e+00, 8.20e-01, 7.46e+00, 1.90e+00, 9.09e-01, 1.58e+02]    [9.29e-01, 4.89e+00, 8.20e-01, 7.46e+00, 1.90e+00, 9.09e-01, 1.58e+02]    []  \n\nBest model at step 5000:\n  train loss: 1.76e+02\n  test loss: 1.75e+02\n  test metric: []\n\n'train' took 94.944952 s\n\nIteration: 4000, Epsilon Value: 2.7071328163146973\nCompiling model...\n'compile' took 0.007241 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n5000      [1.18e+00, 4.84e+00, 8.20e-01, 7.46e+00, 1.90e+00, 9.09e-01, 1.58e+02]    [9.29e-01, 4.89e+00, 8.20e-01, 7.46e+00, 1.90e+00, 9.09e-01, 1.58e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637491.495524      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"6000      [3.81e+00, 5.15e+00, 7.25e-01, 7.33e+00, 2.55e+00, 1.56e+00, 1.48e+02]    [1.75e+00, 3.60e+00, 7.25e-01, 7.33e+00, 2.55e+00, 1.56e+00, 1.48e+02]    []  \n\nBest model at step 6000:\n  train loss: 1.69e+02\n  test loss: 1.65e+02\n  test metric: []\n\n'train' took 95.196455 s\n\nIteration: 5000, Epsilon Value: 2.2086844444274902\nCompiling model...\n'compile' took 0.006628 s\n\nWarning: epochs is deprecated and will be removed in a future version. Use iterations instead.\nTraining model...\n\nStep      Train loss                                                                Test loss                                                                 Test metric\n6000      [3.81e+00, 5.15e+00, 7.25e-01, 7.33e+00, 2.55e+00, 1.56e+00, 1.48e+02]    [1.75e+00, 3.60e+00, 7.25e-01, 7.33e+00, 2.55e+00, 1.56e+00, 1.48e+02]    []  \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732637586.470141      34 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":"## Graphing","metadata":{}},{"cell_type":"code","source":"\nplt.figure(figsize=(10, 6))\nplt.yscale('log')  # Use logarithmic scale if desired\n\nplt.plot(iterations_list, epsilon_values, '-o', label='Iteration vs Epsilon Values', color='blue')\n\ny_ticks = [10**i for i in range(-2, 2)]\nplt.yticks(y_ticks, [f\"$10^{{{i}}}$\" for i in range(-2, 2)], fontsize=12)\n\nplt.xlabel('Iterations', fontsize=14)\nplt.ylabel('Epsilon Value', fontsize=14)\nplt.title('Iterations vs. Epsilon Value', fontsize=16)\nplt.legend()\nplt.grid(True, which=\"both\", ls=\"--\")\nplt.show()\n\n# Load the losses from the file\nfile_path = \"/kaggle/working/losses_simple.txt\"\nlosses_df = pd.read_csv(file_path)\n\n# Calculate the total loss as the sum of component-wise losses for each iteration\n# Assuming that the first column is 'Epoch' and the rest are loss components\nloss_components = losses_df.columns[1:]  # Exclude 'Epoch'\nlosses_df['Total Loss'] = losses_df[loss_components].sum(axis=1)\n\n# Plotting\nplt.figure(figsize=(10, 6))\n\n# Plot component-wise losses\nfor component in loss_components:\n    plt.plot(losses_df['Epoch'], losses_df[component], label=component)\n\n# Plot total loss\n\nplt.plot(losses_df['Epoch'], losses_df['Total Loss'], label='Total Loss', color='black', linewidth=2, linestyle='--')\n\nplt.xlabel('Iteration', fontsize=14)\nplt.ylabel('Loss', fontsize=14)\nplt.title('Loss Components and Total Loss over Iterations', fontsize=16)\nplt.legend()\nplt.grid(True)\n\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}